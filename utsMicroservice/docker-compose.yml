services:
  eurekaserver:
    build: ./eurekaserver
    container_name: eurekaserver
    ports:
      - "8761:8761"
    networks:
      - microservices-net

  movie-service:
    build: ./movie-service
    container_name: movie-service
    ports:
      - "8081:8081"
    environment:
      - spring.datasource.url=jdbc:mysql://mysql:3306/dbcommerce_movie?useSSL=false&serverTimezone=UTC
      - spring.datasource.username=root
      - spring.datasource.password=root_password
      - eureka.client.service-url.defaultZone=http://eurekaserver:8761/eureka/
      - LOGSTASH_HOST=logstash:5000
    depends_on:
      - eurekaserver
      - mysql
    networks:
      - microservices-net

  booking-service:
    build: ./booking-service
    container_name: booking-service
    ports:
      - "9002:9002"
    environment:
      - spring.datasource.url=jdbc:mysql://mysql:3306/dbcommerse_booking?useSSL=false&serverTimezone=UTC
      - spring.datasource.username=root
      - spring.datasource.password=root_password
      - eureka.client.service-url.defaultZone=http://eurekaserver:8761/eureka/
      - LOGSTASH_HOST=logstash:5000
    depends_on:
      - eurekaserver
      - mysql
    networks:
      - microservices-net

  customer-service:
    build: ./customer-service
    container_name: customer-service
    ports:
      - "9003:9003"
    environment:
      - spring.datasource.url=jdbc:mysql://mysql:3306/dbcommerse_customer?useSSL=false&serverTimezone=UTC
      - spring.datasource.username=root
      - spring.datasource.password=root_password
      - eureka.client.service-url.defaultZone=http://eurekaserver:8761/eureka/
      - LOGSTASH_HOST=logstash:5000
    depends_on:
      - eurekaserver
      - mysql
    networks:
      - microservices-net

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "9000:9000"
    environment:
      - eureka.client.service-url.defaultZone=http://eurekaserver:8761/eureka/
      - LOGSTASH_HOST=logstash:5000
    depends_on:
      - eurekaserver
    networks:
      - microservices-net

  # rabbitmq:
  #   image: rabbitmq:3-management
  #   container_name: rabbitmq
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   networks:
  #     - microservices-net

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
    volumes:
      - ./mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - microservices-net

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: root_password
    ports:
      - "8085:80"
    networks:
      - microservices-net
    depends_on:
      - mysql

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices-net
    depends_on:
      - movie-service
      - booking-service
      - customer-service
      - api-gateway

  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   networks:
  #     - microservices-net

  # node-exporter:
  #   image: prom/node-exporter
  #   container_name: node-exporter
  #   ports:
  #     - "9100:9100"
  #   networks:
  #     - microservices-net

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - microservices-net

  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.0
    container_name: logstash
    depends_on:
      - elasticsearch
    ports:
      - "5044:5044"
      - "5001:5000"
      - "9600:9600"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    networks:
      - microservices-net

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.10
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge

volumes:
  esdata:

# services:
#   eurekaserver:
#     build: ./eurekaserver
#     container_name: eurekaserver
#     ports:
#       - "8761:8761"
#     networks:
#       - microservices-net

#   movie-service:
#     build: ./movie-service
#     container_name: movie-service
#     ports:
#       - "8081:8081"
#     environment:
#       - spring.datasource.url=jdbc:mysql://mysql:3306/dbcommerce_movie?useSSL=false&serverTimezone=UTC
#       - spring.datasource.username=root
#       - spring.datasource.password=root_password
#       - eureka.client.service-url.defaultZone=http://eurekaserver:8761/eureka/
#       - LOGSTASH_HOST=logstash:5000
#     depends_on:
#       - eurekaserver
#       - mysql
#     networks:
#       - microservices-net

#   booking-service:
#     build: ./booking-service
#     container_name: booking-service
#     ports:
#       - "9002:9002"
#     environment:
#       - spring.datasource.url=jdbc:mysql://mysql:3306/dbcommerse_booking?useSSL=false&serverTimezone=UTC
#       - spring.datasource.username=root
#       - spring.datasource.password=root_password
#       - eureka.client.service-url.defaultZone=http://eurekaserver:8761/eureka/
#       - LOGSTASH_HOST=logstash:5000
#     depends_on:
#       - eurekaserver
#       - mysql
#     networks:
#       - microservices-net

#   customer-service:
#     build: ./customer-service
#     container_name: customer-service
#     ports:
#       - "9003:9003"
#     environment:
#       - spring.datasource.url=jdbc:mysql://mysql:3306/dbcommerse_customer?useSSL=false&serverTimezone=UTC
#       - spring.datasource.username=root
#       - spring.datasource.password=root_password
#       - eureka.client.service-url.defaultZone=http://eurekaserver:8761/eureka/
#       - LOGSTASH_HOST=logstash:5000
#     depends_on:
#       - eurekaserver
#       - mysql
#     networks:
#       - microservices-net


#   api-gateway:
#     build: ./api-gateway
#     container_name: api-gateway
#     ports:
#       - "9000:9000"
#     environment:
#       - eureka.client.service-url.defaultZone=http://eurekaserver:8761/eureka/
#       - LOGSTASH_HOST=logstash:5000
#     depends_on:
#       - eurekaserver
#     networks:
#       - microservices-net

 
#   rabbitmq:
#     image: rabbitmq:3-management
#     container_name: rabbitmq
#     ports:
#       - "5672:5672"
#       - "15672:15672"
#     networks:
#       - microservices-net

#   mysql:
#     image: mysql:8.0
#     container_name: mysql
#     environment:
#       MYSQL_ROOT_PASSWORD: root_password
#     volumes:
#       - ./mysql/init:/docker-entrypoint-initdb.d
#     ports:
#       - "3306:3306"
#     networks:
#       - microservices-net

#   phpmyadmin:
#     image: phpmyadmin/phpmyadmin
#     container_name: phpmyadmin
#     environment:
#       PMA_HOST: mysql
#       PMA_PORT: 3306
#       PMA_USER: root
#       PMA_PASSWORD: root_password
#     ports:
#       - "8085:80"
#     networks:
#       - microservices-net
#     depends_on:
#       - mysql

#   prometheus:
#     image: prom/prometheus
#     container_name: prometheus
#     ports:
#       - "9090:9090"
#   depends_on:
#     - movie-service
#     - booking-service
#     - customer-service
#     - api-gateway
#   volumes:
#     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
#   networks:
#     - microservices-net

#   grafana:
#     image: grafana/grafana
#     container_name: grafana
#     ports:
#       - "3000:3000"
#     environment:
#       - GF_SECURITY_ADMIN_PASSWORD=admin
#     networks:
#       - microservices-net

#   node-exporter:
#     image: prom/node-exporter
#     container_name: node-exporter
#     ports:
#       - "9100:9100"
#     networks:
#       - microservices-net

#   elasticsearch:
#     image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
#     container_name: elasticsearch
#     environment:
#       - discovery.type=single-node
#       - xpack.security.enabled=false
#       - bootstrap.memory_lock=true
#       - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#     ports:
#       - "9200:9200"
#     volumes:
#       - esdata:/usr/share/elasticsearch/data
#     networks:
#       - microservices-net

#   logstash:
#     image: docker.elastic.co/logstash/logstash:8.12.0
#     container_name: logstash
#     depends_on:
#       - elasticsearch
#     ports:
#       - "5044:5044"
#       - "5001:5000"
#       - "9600:9600"
#     volumes:
#       - ./logstash/pipeline:/usr/share/logstash/pipeline
#     networks:
#       - microservices-net


#   kibana:
#     image: docker.elastic.co/kibana/kibana:7.17.10
#     container_name: kibana
#     ports:
#     - "5601:5601"
#     environment:
#     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#     depends_on:
#     - elasticsearch
#     networks:
#     - microservices-net


# networks:
#   microservices-net:
#     driver: bridge

# volumes:
#   esdata:
